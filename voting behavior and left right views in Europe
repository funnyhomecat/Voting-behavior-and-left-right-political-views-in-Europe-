

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE,message = FALSE)
rm(list=ls())
library(tidyverse)
library(haven)
library(nnet)
library(broom)
library(modelr)
library(modelsummary)
library(kableExtra)
library(sjlabelled)
```


```{r}
# Read in ESS Round 9 data
ess2018 <- read.csv("C:/Users/46765/OneDrive/Desktop/ESS9e03_1.csv")

```

```{r}
tabl <- function(...)table(...,useNA = 'ifany')
```


```{r,results='hide'}

ess_9 <- ess2018 |> select("essround", # REQUIRED: essround
                      "idno", # REQUIRED: respondent ID
                      "cntry", # REQUIRED: country 
                      "gndr" , # gender
                      "agea", # age
                      "ppltrst",
                      "vote",
                      "lrscale",
                      "anweight",
                      starts_with("inw"), # REQUIRED: interview date 
                      starts_with("edulvl"), # educational attainment (several vars)
                      starts_with("prtv"), # party vote
                      -ends_with("de1"), # drop 1st German vote intention var
  )|>
    as.data.frame()
 # find FIRST country-specific vote variable
  start <- head(grep("prtv", colnames(ess_9)), n=1)
  # find LAST country-specific vote variable
  end <- tail(grep("prtv", colnames(ess_9)), n=1)
  # mini dataset of party choice vars
  es.vote <- ess_9 %>% select(start:end)
  # create dataset-wide vote variable by merging the country-specific vars
  ess_9$party.vote.num <- as.vector(do.call(coalesce, es.vote))
  # convert numeric values into party names
  es.vote.named <- as_label(es.vote)
  # convert factors into characters to make sure they're stored properly
  es.vote.named[] <- lapply(es.vote.named, as.character)
  # create another dataset-wide vote variable, this time for the character variable
  ess_9$party.vote.name <- as.vector(do.call(coalesce, es.vote.named))
  # convert to UTF encoding to deal with special characters
  # delete unnecessary variables
  start <- head(grep("prtvt", colnames(ess_9)), n=1)
  end <- tail(grep("prtvt", colnames(ess_9)), n=1)
  ess_9 <- ess_9 %>% select(-(start:end))
  ess_9
  val_labels(ess_9$edulvlb)
  
```



```{r,results='hide'}
# EDUCATION:
# Let's create a dummy variable indicating that the respondent
# has attained a bachelor's degree or above
ess_9$edulvlb[ess_9$edulvlb == 5555]<- NA # "other"


#Creating dummy for bachelors degree
ess_9 <- ess_9 |> 
  mutate(bachelor = case_when(edulvlb > 600 ~ 1,TRUE~ 0))

```

```{r,results='hide'}
# gender
table(ess_9$gndr)
ess_9$female <- ifelse(ess_9$gndr==1, 0, ifelse(ess_9$gndr==2, 1, NA))

# age
table(ess_9$agea)
ess_9$age <- ess_9$agea
ess_9$age[ess_9$agea==999] <- NA
table(ess_9$age)
ess_9$age.group <- cut(ess_9$age, breaks=c(18,30,40,50,65,75,90))

#year
ess_9$essround <- 9

ess_9$party.vote.ess <- ifelse(is.na(ess_9$party.vote.num), NA,
                             paste0(ess_9$cntry, "-", ess_9$essround, "9", ess_9$party.vote.num))

#country
table(ess_9$cntry)
ess_9$party.vote.ess <- ifelse(is.na(ess_9$party.vote.num), NA,
                             paste0(ess_9$cntry, "-", ess_9$essround, "-", ess_9$party.vote.num))
tabl(ess_9$party.vote.ess)
```


```{r,results='hide'}
# load the ESS-Partyfacts extended crosswalk
cw_ess_pf <- read_csv(url("https://raw.githubusercontent.com/sophieehill/ess-partyfacts-crosswalk/master/ess-partyfacts-extended.csv"))
cw_ess_pf$party.vote.ess <- paste0(cw_ess_pf$cntry, "-", cw_ess_pf$essround, "-", cw_ess_pf$ess_id)
cw_ess_pf <- cw_ess_pf %>% select(party.vote.ess, partyfacts_id, partyfacts_name)
```

```{r,results='hide'}
# merge partyfacts IDs into main dataset
ess_9 <- left_join(ess_9, cw_ess_pf, by=c("party.vote.ess"))
tabl(ess_9$party.vote.ess)
tabl(ess_9$partyfacts_ids)
```

```{r,results='hide'}
# now load the Partyfacts-External crosswalk and select the Manifesto dataset
# this lets us link those partyfacts IDs to *other* datasets
cw_pf <- read_csv(url("https://partyfacts.herokuapp.com/download/external-parties-csv/"))
cw_pf$dataset_party_id <- as.numeric(as.character(cw_pf$dataset_party_id))
cw_pf_cmp <- cw_pf %>% filter(dataset_key == "manifesto") %>% select(partyfacts_id, dataset_party_id)

names(cw_pf_cmp) <- c("partyfacts_id", "cmp_id")

ess_9 <- left_join(ess_9, cw_pf_cmp, by=c("partyfacts_id"))
table(ess_9$cmp_id)

```

```{r,results='hide'}
# In order to merge in election-level variables (e.g. measures of a party's manifesto for a particular election)
# First, let's import the dataset from Denis Cohen's github: https://github.com/denis-cohen/ess-election-dates
ess_dates <- read_csv(url("https://raw.githubusercontent.com/denis-cohen/ess-election-dates/master/ess_election_dates.csv"))
# select needed vars
ess_dates <- ess_dates %>% select(cntry, essround, recent_election, recent_election_split1)
# merge in
ess_9 <- left_join(ess_9, ess_dates, by=c("cntry", "essround"))
```

```{r,results='hide'}
ess_9 <- ess_9 %>% mutate(int.day = inwdds)%>%
                   mutate(int.month = inwmms)%>%
                  mutate(int.year =  inwyys)
                                         
ess_9 <- ess_9 %>% mutate(int.date = as.Date(paste(int.year, int.month, int.day, sep="-")))

# for each respondent, let's define their "most recent election", based on start interview date
ess_9 <- ess_9 %>% mutate(ref.election = case_when(int.date > recent_election ~ recent_election,
                                    int.date <= recent_election ~ recent_election_split1))
```


```{r,results='hide'}

# Merge with CMP data to get party families
# Download latest CMP dataset
# (Use API or just load "cmp.csv")
library(manifestoR)
# set API key
mp_setapikey(key = "70af9d9d7f76a3d66d41142debe969f6")
# download latest dataset
cmp <- as.data.frame(mp_maindataset())
# save for replicability
# write.csv(cmp, "cmp_main_2020.csv")
head(cmp)
table(cmp$edate)
summary(cmp$party)
```

```{r,results='hide'}
# create election year variable
cmp$election.year <- as.numeric(as.character(substr(cmp$date, 1, 4)))
# create econ l-r and lib-auth scales, following Bakker & Hobolt (2013)
cmp <- cmp %>% mutate(econlr = scale_logit(data=cmp,
                                           pos=c("per401", "per402", "per407", "per505", 
                                                 "per507", "per410", "per414", "per702"), 
                                           neg=c("per403", "per404", "per406", "per504", 
                                                 "per506", "per413", "per412", "per701", 
                                                 "per405", "per409", "per415", "per503"),
                                           zero_offset = 0.5))
cmp <- cmp %>% mutate(econlr.sal = (per401 + per402 + per407 + per505 + per507 + per410 + per414 + per702) +
                        (per403 + per404 + per406 + per504 + per506 + per413 + per412 + per701 + per405 + per409 + per415 + per503))


summary(cmp$econlr.sal)
cmp <- cmp %>% mutate(auth = scale_logit(data=cmp,
                                         pos=c("per305", "per601", "per603", "per605", 
                                               "per608", "per606"), 
                                         neg=c("per501", "per602", "per604", "per502", 
                                               "per607", "per416", "per705", "per706", 
                                               "per201", "per202"),
                                         zero_offset = 0.5))
cmp <- cmp %>% mutate(auth.sal = (per305 + per601 + per603 + per605 + per608  + per606) +
                        (per501 + per602 + per604 + per502 + per607 + per416 + per705 + per706 + per201 + per202))
```

```{r,results='hide'}
# select party code, party family
# as well as party-election specific variables like right/left coding of the manifesto
cmp.x <- cmp %>% select(party, parfam, election.year, edate, rile, 
                        econlr, econlr.sal, auth, auth.sal)
names(cmp.x)[1:2] <- c("cmp_id", "cmp_parfam") # relabel for clarity
head(cmp.x)
ess_9$election.year <- as.numeric(as.character(substr(ess_9$ref.election, 1, 4)))
table(ess_9$election.year)

# match up by election year
ess_9 <- left_join(ess_9, cmp.x, by=c("cmp_id", "election.year"))
# alternatively we could match on exact election date
 #cmp.x$election.date <- as.Date(cmp.x$edate)
 #ess_9$election.date <- as.Date(ess_9$ref.election)
 #ess_9 <- left_join(ess_9, cmp.x, by=c("cmp_id", "election.date"))
```

```{r,results='hide'}
# create left vote recall based on party families
# 10 = ecological
# 20 = socialist or other left
# 30 = social democratic
ess_9$vote.left <- ifelse(ess_9$cmp_parfam==10 | ess_9$cmp_parfam==20 | ess_9$cmp_parfam==30, 1, 0)

names(ess_9)
head(ess_9)

essx <- ess_9 %>% select(idno,vote, cntry, essround, int.date,
                       female, age, age.group,bachelor,ppltrst, 
                       party.vote.ess, partyfacts_id, partyfacts_name,
                       cmp_id, cmp_parfam, vote.left, ref.election,
                       election.year, edate, rile,
                       econlr, econlr.sal, auth, auth.sal,lrscale,anweight) %>% 
                        as.data.frame() %>% drop_na() 
str(essx)
```

## Task1
(1) Using data for all of Europe, examine how participation in the election is shaped by left-right political views. Be sure to control for age, education, and gender in your analysis.


```{r}
#change vote to factor variable
essx$vote.left <- as.factor(essx$vote.left)
#Calculate descriptive statistics for all five variables
table_1 <- datasummary((Heading("")*1+Heading("")*vote.left)*(Heading("Number")*1 + Heading("Age")*age + Heading("Gender(female)")*female + Heading("High education")*bachelor) ~ Min + Max + Heading("Mean")*mean + Heading("SD")*sd + N + Percent(denom = Equal(vote.left)),
            data = essx,
            fmt = 2,
            title = "Descriptive Statistics for Participants in the 2018 Europe Election (ESS)",
            notes = c("Source: the European Social Survey (ESS) available on https://www.europeansocialsurvey.org/"),booktabs=TRUE) 
  
table_1 |>  kable_styling(latex_options = "hold_position")
```



```{r,results='hide'}
# Create a binary logistic regression model
model1 <- glm(vote.left ~  age + bachelor + female + ppltrst, data = essx, family = binomial())
summary(model1)

model2 <- glm(vote.left ~  age + bachelor + female + ppltrst + rile, data = essx, family = binomial())
summary(model2)
```

```{r}
# Put two models in one table
# Present the raw coefficients
models <- list("Model A" = model1,
               "Model B" = model2)
modelsummary(models,
              coef_rename = c("(Intercept)"="Intercept",
                                 "female"="Gender",
                                 "age"="Age (years)",
                                 "bachelor"="Education",
                                 "rile" = " Left-right political views"
                                 ),
             shape = term ~ model,
             fmt = 3,
             stars = TRUE,
             title = "left-right political views of participation in the 2018 Election.") |> 
  footnote("Source: the 9th (2018) round of the European Social Survey (ESS).") |> 
  kable_styling(latex_options = "hold_position")
```


## Task 2
(2) Analyze which party family people voted for as a function their left-right political views. Your outcome should be polytomous, with different categories for different parties or voting blocs.We suggest merging in the “parfam” variable from the Party Manifesto data, potentially
aggregating into party “blocs” as we did with the ESS data.

```{r,results='hide'}
# create party family or voting bloc variable
essx$party_group <- ifelse(essx$cmp_parfam %in% c(10, 20, 30), "Center-Right", 
                            ifelse(essx$cmp_parfam %in% c(40, 50), "Center-Left",
                                   ifelse(essx$cmp_parfam %in% c(70, 80), "Radical-Right",
                                          ifelse(essx$cmp_parfam %in% c(90, 100), "Radical-Left", "Other"))))
essx <- essx |> 
 mutate(party_group = fct_relevel(party_group,"Left"))
 levels(essx$party_group)
 
essx <- essx |> 
  mutate(party_group = fct_infreq(party_group))

# fit multinomial logistic regression model
library(nnet)
model3 <- multinom(party_group ~ age  +female +bachelor, data = essx)
summary(model3) 

model4 <- multinom(party_group ~ age+ female + bachelor + lrscale + econlr, data = essx)
summary(model4)

```


```{r}
# Put two models in one table
# Present the raw coefficients
models <- list("Model C" = model3,
               "Model D" = model4)
modelsummary(models,
              coef_rename = c("(Intercept)"="Intercept (ref:Left)",
                                 "age"="Age",
                                 "bachelor"="Education",
                                 "lrscale" = "Placement on left right scale",
                                 "econlr" = "Economic Left/Right"
                                 ),
             shape = term ~ model + response,
             fmt = 1,
             stars = TRUE,
             title = "left-right political views of participation in the 2018 Election.") |> 
  footnote("Source: the 9th (2018) round of the European Social Survey (ESS).") |> 
  kable_styling(font_size = 6,latex_options = "hold_position")
```


## Task 3
(3) Using ESS data for the whole of Europe, along with Party Manifesto Data, analyze how
left-right political views are related to party choice, where you consider left-rate ideological
placement at the party and individual level as explanatory variables. Note that you should
use the analytic weights when estimating your model.

```{r,results='hide'}
# only keep the variables we need for study in essx_1
essx_1 <- essx |> 
  select(idno,cntry,female,age,bachelor,partyfacts_name,cmp_parfam,party_group,anweight,rile,lrscale)
View(essx_1)
# Create a vector that contains all possible choices
choices <- levels(as.factor(essx_1$party_group))
# Create new id column since idno is kind of "jumping"
essx_1$id <- 1:nrow(essx_1)
# Create a vector. Repeat all ids for 4 times(the number of alternatives) and store the values in the new vector
repe <- rep(1:nrow(essx_1),length(choices))

# Expand essx_3. Repeat each row 
essx_1 <- data.frame(essx_1[repe,],
                       alt = factor(rep(choices, each = nrow(essx_1)))) 

# Create a column based on whether the possible alternative was indeed the voter's choice(1/0) 
essx_1 <- essx_1 |> 
    mutate(choice = if_else(party_group == alt, 1, 0))

# Group the original data frame by country, party_bloc, and partyfacts_name columns
# Calculate the mean value of the rile column for each unique party
df_avg_rile <- essx |> 
  group_by(cntry,party_group,partyfacts_name) |> 
  summarize(avg_rile = mean(rile))

# But each unique party can be put in one of four choices(left, right, liberal, other)
# We need to group the df_avg_rile again to get the real average rile for the four possible choices
# Group df_avg_rile by country and partybloc columns
# Calculate the mean value of the mean_rile column for each group
df_final <- df_avg_rile |>  
    group_by(cntry, party_group) |> 
    summarize(avg_rile_x = mean(avg_rile)) |> 
    drop_na()

# Combine the essx_1 with df_final by country and party_bloc columns
ess_long <- essx_1 |> 
    left_join(df_final, 
              by = c("cntry", "alt" = "party_group"))
View(ess_long)
# Improve the appearance of ess_long
ess_long <- ess_long |> 
  select(id,cntry,female,age,bachelor,anweight,alt,party_group,avg_rile_x,choice,lrscale)

View(ess_long)

```



```{r,results='hide'}
library(survival)

# Fit the conditional logistic regression model
clogit_model <- clogit(choice ~ strata(id) + avg_rile_x:female + avg_rile_x:age + 
                         avg_rile_x:bachelor + avg_rile_x:lrscale,  data = ess_long, weights = anweight)

summary(clogit_model)

```

```{r}
modelsummary(clogit_model,
              coef_rename = c( "age"="Age",
                                 "bachelor"="Education",
                                 "female" = "Female(ref:male)",
                                 "lrscale" ="Placement on left right scale"),
             fmt = 3,
             stars = TRUE,
             title = "Analysis on how left-right political views are related to party choice") |> 
  footnote("Source: the 9th (2018) round of the European Social Survey (ESS).") |> 
  kable_styling(latex_options = "hold_position")
```


```{r}
#plot the best-fit model predict result
theme_set(theme_light())

estimates <- tidy(clogit_model, exponentiate = TRUE, conf.int = TRUE)

estimates |>
  filter(term != "(Intercept)") |>
  ggplot(aes(term,estimate)) +
  geom_hline(yintercept = 1, color = "red", linetype = "dashed") +
  geom_point() +
  scale_y_continuous(breaks = seq(0, 2.2, by = .2),limits = c(0, 2.2)) +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high, width = .1)) +
  coord_flip() +
  labs(tittle = "Odds ratios plot for predicting the Best Picure Award Oscars",
       y = "Odds ratios",
       x = "Variables",
       caption = "the 9th (2018) round of the European Social Survey (ESS).")
```





